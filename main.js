!function(){"use strict";const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button_type_submit",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_active"},e={url:"https://around-api.en.tripleten-services.com/v1",token:"9711a792-8332-4754-8b11-0fe0d4037fb9"};class s{constructor(t,e,s,o,n){let{name:r,link:i,_id:a}=t;this._name=r,this._link=i,this._cardId=a,this._cardSelector=e,this._handleImageClick=s,this._handleApiCallback=o,this._handleDeleteButton=n}_handleLikeButton=t=>{t.target.classList.contains("card__button-like_state_active")&&(this._callbackOptions={action:"DELETE",endpoint:`cards/${this._cardId}/likes`}),this._callbackOptions={action:"PUT",endpoint:`cards/${this._cardId}/likes`},this._handleApiCallback(this._callbackOptions).then((()=>t.target.classList.toggle("card__button-like_state_active"))).catch((t=>console.error(t)))};_handleDeletion=()=>{this._handleDeleteButton().then((t=>{t&&(this._handleApiCallback({action:"DELETE",endpoint:`cards/${this._cardId}`}),this._cardElement.remove())})).catch((t=>console.error(t)))};_setEventListeners(){this._cardElement.querySelector(".card__button-like").addEventListener("click",this._handleLikeButton),this._cardElement.querySelector(".card__button-delete").addEventListener("click",this._handleDeletion),this._image.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}generateCard(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement.querySelector(".card__name").textContent=this._name,this._image=this._cardElement.querySelector(".card__image"),this._image.src=this._link,this._image.alt=this._name,this._setEventListeners(),this._cardElement}}class o{constructor(t,e){let{items:s,renderer:o}=t;this._items=s,this._renderer=o,this._container=document.querySelector(e)}addItem(t){this._container.prepend(t)}renderItems(){this._items.forEach((t=>this._renderer(t)))}setItems(t){this._items=t}}class n{constructor(t,e){this._settings=e,this._form=t}_showError(t){const e=this._form.querySelector(`.${t.id}-error`);e.classList.add(this._settings.errorClass),t.classList.add(this._settings.inputErrorClass),e.textContent=t.validationMessage}_hideError(t){const e=this._form.querySelector(`.${t.id}-error`);e.classList.remove(this._settings.errorClass),t.classList.remove(this._settings.inputErrorClass),e.textContent=""}_disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(){return this._inputsList.some((t=>!t.validity.valid))}_toggleButton(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_checkInputValidity(t){this._toggleButton();const e=t.target;e.validity.valid?this._hideError(e):this._showError(e)}_setInputsListener(){this._inputsList.forEach((t=>{t.addEventListener("input",(t=>this._checkInputValidity(t)))})),this._form.addEventListener("reset",(()=>{this._inputsList.forEach((t=>this._hideError(t))),this._disableButton()}))}resetValidation(){this._toggleButton(),this._inputsList.forEach((t=>this._hideError(t)))}enableValidation(){this._inputsList=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._form.querySelector(this._settings.submitButtonSelector),this._setInputsListener()}}class r{constructor(t){this._modal=document.querySelector(t)}open(){this._modal.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modal.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=t=>{"Escape"==t.key&&this.close()};_handleMouseClose=t=>{(t.target.classList.contains("modal__button_type_close")||t.target==this._modal)&&this.close()};setEventListeners(){this._modal.addEventListener("mousedown",this._handleMouseClose)}}class i extends r{constructor(t){let{selector:e,callback:s}=t;super(e),this._submitHandler=s,this._form=this._modal.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__input"),this._submitButton=this._form.querySelector(".modal__button_type_submit")}_getInputValues(){return this._formValues={},this._inputList.forEach((t=>this._formValues[t.name]=t.value)),this._formValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault();const e=this._submitButton.textContent;this._submitButton.textContent="Saving...",this._submitHandler(this._getInputValues()).then((()=>{super.close(),this._form.reset()})).catch((t=>console.error(t))).finally((()=>this._submitButton.textContent=e))}))}setInputsValues(t){this._inputList.forEach((e=>e.value=t[e.name]))}getForm(){return this._form}}class a extends r{constructor(t){super(t),this._image=this._modal.querySelector(".modal__image"),this._imageName=this._modal.querySelector(".modal__image-name")}open(t){let{name:e,link:s}=t;super.open(),this._image.src=s,this._image.alt=e,this._imageName.textContent=e}}class l extends r{constructor(t){super(t),this._confirmButton=document.getElementById("button-confirm")}open(){return super.open(),new Promise((t=>{this._isConfirmed=!1,this._resolve=t,this._handleConfirm=()=>{this._isConfirmed=!0,this._resolve(!0),this.close()},this._confirmButton.addEventListener("click",this._handleConfirm,{once:!0})}))}close(){this._isConfirmed||(this._resolve(!1),this._resolve=null),super.close()}}class c{constructor(t){let{nameSelector:e,aboutSelector:s,photoSelector:o}=t;this._name=document.querySelector(e),this._about=document.querySelector(s),this._avatarPhoto=document.querySelector(o)}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserInfo(t){let{name:e,about:s,avatar:o}=t;this._name.textContent=e,this._about.textContent=s,o&&(this._avatarPhoto.onload=()=>{this._avatarPhoto.classList.remove("profile__photo_placeholder")},this._avatarPhoto.src=o)}}class d{constructor(t){let{url:e,token:s}=t;this._apiurl=e,this._options={headers:{authorization:s,"Content-Type":"application/json"}}}_genericFetch(t){let{method:e="GET",endpoint:s,body:o}=t;const n={...this._options,method:e};return o&&(n.body=JSON.stringify(o)),fetch(`${this._apiurl}/${s}`,n).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}getUser(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"users/me";return this._genericFetch({endpoint:t})}getCard(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"cards";return this._genericFetch({endpoint:t})}editUser(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"users/me";return this._genericFetch({method:"PATCH",endpoint:e,body:t})}editCard(t,e){return this._genericFetch({method:t,endpoint:e})}addCard(t){return this._genericFetch({method:"POST",endpoint:"cards",body:t})}}(()=>{let{editPopupSelector:r,addPopupSelector:_,confirmPopupSelector:h,nameSelector:u,aboutSelector:m,popupImageContainer:p,cardsContainer:b,buttonEditSelector:v,buttonAddSelector:g,photoSelector:f,editAvatarPopupSelector:E,profileAvatarSelector:S}={editPopupSelector:"#modal-edit",addPopupSelector:"#modal-add",confirmPopupSelector:"#modal-confirm",nameSelector:".profile__name",aboutSelector:".profile__description",popupImageContainer:"#modal-image-container",cardsContainer:".elements__list",buttonEditSelector:".profile__button_type_edit",buttonAddSelector:".profile__button_type_add",photoSelector:".profile__photo",editAvatarPopupSelector:"#modal-edit-avatar",profileAvatarSelector:".profile__avatar"};const C={},L=new a(p);L.setEventListeners();const y=new d(e),k=new c({nameSelector:u,aboutSelector:m,photoSelector:f}),I=t=>{L.open(t)},B=t=>{let{action:e,endpoint:s}=t;return y.editCard(e,s)},q=new l(h);q.setEventListeners();const w=()=>q.open(),P=t=>new s(t,"#card",I,B,w).generateCard(),V=new o({items:[],renderer:t=>{V.addItem(P(t))}},b),x=new i({selector:r,callback:t=>{const e={name:t["edit-name"],about:t["edit-job"]};return y.editUser(e).then((()=>k.setUserInfo(e))).catch((t=>console.error(t)))}});x.setEventListeners();const U=new i({selector:_,callback:t=>{const e={name:t["add-name"],link:t["add-link"],avatar:k.getUserInfo().avatar};return y.addCard(e).then((()=>V.addItem(P(e)))).catch((t=>console.error(t)))}});U.setEventListeners();const A=new i({selector:E,callback:t=>{const{name:e,about:s}=k.getUserInfo(),o={name:e,about:s,avatar:t["edit-avatar"]};return y.editUser(o).then((()=>k.setUserInfo(o))).catch((t=>console.error(t)))}});A.setEventListeners(),y.getUser().then((t=>{k.setUserInfo(t)})).catch((t=>console.error(t))),y.getCard().then((t=>{V.setItems(t.reverse()),V.renderItems()})).catch((t=>{console.error(t)})),(t=>{const e=[];e.push(x.getForm()),e.push(U.getForm()),e.push(A.getForm()),e.forEach((e=>{C[e.name]=new n(e,t),C[e.name].enableValidation()}))})(t),document.querySelector(S).addEventListener("mousedown",(()=>{A.open(),C[A.getForm().name].resetValidation()})),document.querySelector(v).addEventListener("click",(()=>{x.open(),(()=>{const{name:t,about:e}=k.getUserInfo();x.setInputsValues({"edit-name":t,"edit-job":e})})(),C[x.getForm().name].resetValidation()})),document.querySelector(g).addEventListener("click",(()=>{U.open(),C[U.getForm().name].resetValidation()}))})()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFRRCxNQUFNQSxLQUVsQytJLEVBQ0dmLFVBQ0FuSSxNQUFNMEgsSUFDTDhCLEVBQVN2SCxTQUFTeUYsRUFBT29DLFdBQ3pCTixFQUFTMUgsYUFBYSxJQUV2QjVCLE9BQU9DLElBQ05DLFFBQVFELE1BQU1BLEVBQU0sSUEwRTFCLENBQUU0SixJQUNBLE1BQU1DLEVBQWlCLEdBQ3ZCQSxFQUFlQyxLQUFLUCxFQUFVcEUsV0FDOUIwRSxFQUFlQyxLQUFLTCxFQUFTdEUsV0FDN0IwRSxFQUFlQyxLQUFLSixFQUFnQnZFLFdBQ3BDMEUsRUFBZWpJLFNBQVNJLElBQ3RCNkcsRUFBZTdHLEVBQUt0RCxNQUFRLElBQUlxRCxFQUFjQyxFQUFNNEgsR0FDcERmLEVBQWU3RyxFQUFLdEQsTUFBTThFLGtCQUFrQixHQUUvQyxFQVRELENBU0cvRixHQUdIa0QsU0FDR0osY0FBY3FJLEdBQ2RwSSxpQkFBaUIsYUFBYSxLQUM3QmtKLEVBQWdCNUYsT0FDaEIrRSxFQUFlYSxFQUFnQnZFLFVBQVV6RyxNQUFNNkUsaUJBQWlCLElBSXBFNUMsU0FBU0osY0FBY2tJLEdBQW9CakksaUJBQWlCLFNBQVMsS0FDbkUrSSxFQUFVekYsT0E1QmNpRyxNQUN4QixNQUFNLEtBQUVyTCxFQUFJLE1BQUU0SCxHQUFVMEMsRUFBUzNDLGNBQ2pDa0QsRUFBVXRFLGdCQUFnQixDQUFFLFlBQWF2RyxFQUFNLFdBQVk0SCxHQUFRLEVBMkJuRXlELEdBQ0FsQixFQUFlVSxFQUFVcEUsVUFBVXpHLE1BQU02RSxpQkFBaUIsSUFJNUQ1QyxTQUFTSixjQUFjbUksR0FBbUJsSSxpQkFBaUIsU0FBUyxLQUNsRWlKLEVBQVMzRixPQUNUK0UsRUFBZVksRUFBU3RFLFVBQVV6RyxNQUFNNkUsaUJBQWlCLEdBRTVELEVBbkxELEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb24uanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvY29tcG9uZW50cy9BUEkuanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpbml0aWFsRGF0YSA9IFtcbiAge1xuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWtlLWxvdWlzZS5qcGdcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXG4gIH0sXG5dO1xuXG5jb25zdCB2YWxpZGF0ZUZvcm1Db25maWdPYmplY3QgPSB7XG4gIGZvcm1TZWxlY3RvcjogXCIubW9kYWxfX2Zvcm1cIixcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uX3R5cGVfc3VibWl0XCIsXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX2J1dHRvbl9kaXNhYmxlZFwiLFxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfYWN0aXZlXCIsXG59O1xuXG5jb25zdCBzZWxlY3RvcnMgPSB7XG4gIGVkaXRQb3B1cFNlbGVjdG9yOiBcIiNtb2RhbC1lZGl0XCIsXG4gIGFkZFBvcHVwU2VsZWN0b3I6IFwiI21vZGFsLWFkZFwiLFxuICBjb25maXJtUG9wdXBTZWxlY3RvcjogXCIjbW9kYWwtY29uZmlybVwiLFxuICBuYW1lU2VsZWN0b3I6IFwiLnByb2ZpbGVfX25hbWVcIixcbiAgYWJvdXRTZWxlY3RvcjogXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcbiAgcG9wdXBJbWFnZUNvbnRhaW5lcjogXCIjbW9kYWwtaW1hZ2UtY29udGFpbmVyXCIsXG4gIGNhcmRzQ29udGFpbmVyOiBcIi5lbGVtZW50c19fbGlzdFwiLFxuICBidXR0b25FZGl0U2VsZWN0b3I6IFwiLnByb2ZpbGVfX2J1dHRvbl90eXBlX2VkaXRcIixcbiAgYnV0dG9uQWRkU2VsZWN0b3I6IFwiLnByb2ZpbGVfX2J1dHRvbl90eXBlX2FkZFwiLFxuICBwaG90b1NlbGVjdG9yOiBcIi5wcm9maWxlX19waG90b1wiLFxuICBlZGl0QXZhdGFyUG9wdXBTZWxlY3RvcjogXCIjbW9kYWwtZWRpdC1hdmF0YXJcIixcbiAgcHJvZmlsZUF2YXRhclNlbGVjdG9yOiBcIi5wcm9maWxlX19hdmF0YXJcIixcbn07XG5cbmNvbnN0IEFQSWRhdGEgPSB7XG4gIHVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxuICB0b2tlbjogXCI5NzExYTc5Mi04MzMyLTQ3NTQtOGIxMS0wZmUwZDQwMzdmYjlcIixcbn07XG5cbmV4cG9ydCB7IGluaXRpYWxEYXRhLCB2YWxpZGF0ZUZvcm1Db25maWdPYmplY3QsIHNlbGVjdG9ycywgQVBJZGF0YSB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHsgbmFtZSwgbGluaywgX2lkIH0sXG4gICAgY2FyZFNlbGVjdG9yLFxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXG4gICAgaGFuZGxlQXBpQ2FsbGJhY2ssXG4gICAgaGFuZGxlRGVsZXRlQnV0dG9uXG4gICkge1xuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICAgIHRoaXMuX2xpbmsgPSBsaW5rO1xuICAgIHRoaXMuX2NhcmRJZCA9IF9pZDtcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XG4gICAgdGhpcy5faGFuZGxlQXBpQ2FsbGJhY2sgPSBoYW5kbGVBcGlDYWxsYmFjaztcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVCdXR0b24gPSBoYW5kbGVEZWxldGVCdXR0b247XG4gIH1cblxuICBfaGFuZGxlTGlrZUJ1dHRvbiA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY2FyZF9fYnV0dG9uLWxpa2Vfc3RhdGVfYWN0aXZlXCIpKSB7XG4gICAgICB0aGlzLl9jYWxsYmFja09wdGlvbnMgPSB7XG4gICAgICAgIGFjdGlvbjogXCJERUxFVEVcIixcbiAgICAgICAgZW5kcG9pbnQ6IGBjYXJkcy8ke3RoaXMuX2NhcmRJZH0vbGlrZXNgLFxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5fY2FsbGJhY2tPcHRpb25zID0ge1xuICAgICAgYWN0aW9uOiBcIlBVVFwiLFxuICAgICAgZW5kcG9pbnQ6IGBjYXJkcy8ke3RoaXMuX2NhcmRJZH0vbGlrZXNgLFxuICAgIH07XG4gICAgdGhpcy5faGFuZGxlQXBpQ2FsbGJhY2sodGhpcy5fY2FsbGJhY2tPcHRpb25zKVxuICAgICAgLnRoZW4oKCkgPT5cbiAgICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19idXR0b24tbGlrZV9zdGF0ZV9hY3RpdmVcIilcbiAgICAgIClcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAgfTtcblxuICBfaGFuZGxlRGVsZXRpb24gPSAoKSA9PiB7XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQnV0dG9uKClcbiAgICAgIC50aGVuKChjb25maXJtYXRpb24pID0+IHtcbiAgICAgICAgaWYgKGNvbmZpcm1hdGlvbikge1xuICAgICAgICAgIHRoaXMuX2hhbmRsZUFwaUNhbGxiYWNrKHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJERUxFVEVcIixcbiAgICAgICAgICAgIGVuZHBvaW50OiBgY2FyZHMvJHt0aGlzLl9jYXJkSWR9YCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAgfTtcblxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2J1dHRvbi1saWtlXCIpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX2hhbmRsZUxpa2VCdXR0b24pO1xuXG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2J1dHRvbi1kZWxldGVcIilcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faGFuZGxlRGVsZXRpb24pO1xuXG4gICAgdGhpcy5faW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2soeyBuYW1lOiB0aGlzLl9uYW1lLCBsaW5rOiB0aGlzLl9saW5rIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2VuZXJhdGVDYXJkKCkge1xuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX25hbWVcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xuICAgIHRoaXMuX2ltYWdlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcbiAgICB0aGlzLl9pbWFnZS5zcmMgPSB0aGlzLl9saW5rO1xuICAgIHRoaXMuX2ltYWdlLmFsdCA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBzZWxlY3Rvcikge1xuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfVxuXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xuICB9XG5cbiAgcmVuZGVySXRlbXMoKSB7XG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4gdGhpcy5fcmVuZGVyZXIoaXRlbSkpO1xuICB9XG5cbiAgc2V0SXRlbXMoaXRlbXMpIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoZm9ybSwgc2V0dGluZ3MpIHtcbiAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuX2Zvcm0gPSBmb3JtO1xuICB9XG5cbiAgX3Nob3dFcnJvcihpbnB1dCkge1xuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgLiR7aW5wdXQuaWR9LWVycm9yYCk7XG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fc2V0dGluZ3MuZXJyb3JDbGFzcyk7XG4gICAgaW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLl9zZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0LnZhbGlkYXRpb25NZXNzYWdlO1xuICB9XG5cbiAgX2hpZGVFcnJvcihpbnB1dCkge1xuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgLiR7aW5wdXQuaWR9LWVycm9yYCk7XG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuZXJyb3JDbGFzcyk7XG4gICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG4gIH1cblxuICBfZGlzYWJsZUJ1dHRvbigpIHtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9zZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgX2VuYWJsZUJ1dHRvbigpIHtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIF9oYXNJbnZhbGlkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0c0xpc3Quc29tZSgoaW5wdXQpID0+ICFpbnB1dC52YWxpZGl0eS52YWxpZCk7XG4gIH1cblxuICBfdG9nZ2xlQnV0dG9uKCkge1xuICAgIHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpID8gdGhpcy5fZGlzYWJsZUJ1dHRvbigpIDogdGhpcy5fZW5hYmxlQnV0dG9uKCk7XG4gIH1cblxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGV2ZW50KSB7XG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uKCk7XG4gICAgY29uc3QgaW5wdXQgPSBldmVudC50YXJnZXQ7XG4gICAgaWYgKCFpbnB1dC52YWxpZGl0eS52YWxpZCkgdGhpcy5fc2hvd0Vycm9yKGlucHV0KTtcbiAgICBlbHNlIHRoaXMuX2hpZGVFcnJvcihpbnB1dCk7XG4gIH1cblxuICBfc2V0SW5wdXRzTGlzdGVuZXIoKSB7XG4gICAgdGhpcy5faW5wdXRzTGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIChldmVudCkgPT5cbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGV2ZW50KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInJlc2V0XCIsICgpID0+IHtcbiAgICAgIHRoaXMuX2lucHV0c0xpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHRoaXMuX2hpZGVFcnJvcihpbnB1dCkpO1xuICAgICAgdGhpcy5fZGlzYWJsZUJ1dHRvbigpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVzZXRWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvbigpO1xuICAgIHRoaXMuX2lucHV0c0xpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHRoaXMuX2hpZGVFcnJvcihpbnB1dCkpO1xuICB9XG5cbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICB0aGlzLl9pbnB1dHNMaXN0ID0gQXJyYXkuZnJvbShcbiAgICAgIHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9zZXR0aW5ncy5pbnB1dFNlbGVjdG9yKVxuICAgICk7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgdGhpcy5fc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3JcbiAgICApO1xuICAgIHRoaXMuX3NldElucHV0c0xpc3RlbmVyKCk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcbiAgY29uc3RydWN0b3Ioc2VsZWN0b3IpIHtcbiAgICB0aGlzLl9tb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLl9tb2RhbC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX21vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9XG5cbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LmtleSA9PSBcIkVzY2FwZVwiKSB0aGlzLmNsb3NlKCk7XG4gIH07XG5cbiAgX2hhbmRsZU1vdXNlQ2xvc2UgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoXG4gICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfX2J1dHRvbl90eXBlX2Nsb3NlXCIpIHx8XG4gICAgICBldmVudC50YXJnZXQgPT0gdGhpcy5fbW9kYWxcbiAgICApXG4gICAgICB0aGlzLmNsb3NlKCk7XG4gIH07XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9oYW5kbGVNb3VzZUNsb3NlKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHsgc2VsZWN0b3IsIGNhbGxiYWNrIH0pIHtcbiAgICBzdXBlcihzZWxlY3Rvcik7XG4gICAgdGhpcy5fc3VibWl0SGFuZGxlciA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9tb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xuICAgIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIik7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19idXR0b25fdHlwZV9zdWJtaXRcIik7XG4gIH1cblxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gICAgdGhpcy5fZm9ybVZhbHVlcyA9IHt9O1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKFxuICAgICAgKGl0ZW0pID0+ICh0aGlzLl9mb3JtVmFsdWVzW2l0ZW0ubmFtZV0gPSBpdGVtLnZhbHVlKVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1WYWx1ZXM7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBidXR0b25UZXh0ID0gdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50O1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZpbmcuLi5cIjtcbiAgICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgICAgICAgdGhpcy5fZm9ybS5yZXNldCgpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4gKHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGJ1dHRvblRleHQpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldElucHV0c1ZhbHVlcyhpbnB1dERhdGEpIHtcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaXRlbSkgPT4gKGl0ZW0udmFsdWUgPSBpbnB1dERhdGFbaXRlbS5uYW1lXSkpO1xuICB9XG5cbiAgZ2V0Rm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZm9ybTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3RvcihzZWxlY3Rvcikge1xuICAgIHN1cGVyKHNlbGVjdG9yKTtcbiAgICB0aGlzLl9pbWFnZSA9IHRoaXMuX21vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlXCIpO1xuICAgIHRoaXMuX2ltYWdlTmFtZSA9IHRoaXMuX21vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlLW5hbWVcIik7XG4gIH1cblxuICBvcGVuKHsgbmFtZSwgbGluayB9KSB7XG4gICAgc3VwZXIub3BlbigpO1xuICAgIHRoaXMuX2ltYWdlLnNyYyA9IGxpbms7XG4gICAgdGhpcy5faW1hZ2UuYWx0ID0gbmFtZTtcbiAgICB0aGlzLl9pbWFnZU5hbWUudGV4dENvbnRlbnQgPSBuYW1lO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoQ29uZmltcmF0aW9uIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3RvcihzZWxlY3Rvcikge1xuICAgIHN1cGVyKHNlbGVjdG9yKTtcbiAgICB0aGlzLl9jb25maXJtQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b24tY29uZmlybVwiKTtcbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgc3VwZXIub3BlbigpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLl9pc0NvbmZpcm1lZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB0aGlzLl9oYW5kbGVDb25maXJtID0gKCkgPT4ge1xuICAgICAgICB0aGlzLl9pc0NvbmZpcm1lZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3Jlc29sdmUodHJ1ZSk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH07XG4gICAgICB0aGlzLl9jb25maXJtQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oYW5kbGVDb25maXJtLCB7XG4gICAgICAgIG9uY2U6IHRydWUsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIGlmICghdGhpcy5faXNDb25maXJtZWQpIHtcbiAgICAgIHRoaXMuX3Jlc29sdmUoZmFsc2UpO1xuICAgICAgdGhpcy5fcmVzb2x2ZSA9IG51bGw7XG4gICAgfVxuICAgIHN1cGVyLmNsb3NlKCk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGFib3V0U2VsZWN0b3IsIHBob3RvU2VsZWN0b3IgfSkge1xuICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XG4gICAgdGhpcy5fYWJvdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGFib3V0U2VsZWN0b3IpO1xuICAgIHRoaXMuX2F2YXRhclBob3RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwaG90b1NlbGVjdG9yKTtcbiAgfVxuXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB7IG5hbWU6IHRoaXMuX25hbWUudGV4dENvbnRlbnQsIGFib3V0OiB0aGlzLl9hYm91dC50ZXh0Q29udGVudCB9O1xuICB9XG5cbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCwgYXZhdGFyIH0pIHtcbiAgICB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICB0aGlzLl9hYm91dC50ZXh0Q29udGVudCA9IGFib3V0O1xuICAgIGlmIChhdmF0YXIpIHtcbiAgICAgIHRoaXMuX2F2YXRhclBob3RvLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5fYXZhdGFyUGhvdG8uY2xhc3NMaXN0LnJlbW92ZShcInByb2ZpbGVfX3Bob3RvX3BsYWNlaG9sZGVyXCIpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuX2F2YXRhclBob3RvLnNyYyA9IGF2YXRhcjtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XG4gIGNvbnN0cnVjdG9yKHsgdXJsLCB0b2tlbiB9KSB7XG4gICAgdGhpcy5fYXBpdXJsID0gdXJsO1xuICAgIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246IHRva2VuLFxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIF9nZW5lcmljRmV0Y2goeyBtZXRob2QgPSBcIkdFVFwiLCBlbmRwb2ludCwgYm9keSB9KSB7XG4gICAgY29uc3QgZmV0Y2hPcHRpb25zID0geyAuLi50aGlzLl9vcHRpb25zLCBtZXRob2QgfTtcbiAgICBpZiAoYm9keSkgZmV0Y2hPcHRpb25zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYXBpdXJsfS8ke2VuZHBvaW50fWAsIGZldGNoT3B0aW9ucykudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0Lm9rKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuanNvbigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXN1bHQuc3RhdHVzfWApO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0VXNlcihlbmRwb2ludCA9IFwidXNlcnMvbWVcIikge1xuICAgIHJldHVybiB0aGlzLl9nZW5lcmljRmV0Y2goeyBlbmRwb2ludCB9KTtcbiAgfVxuXG4gIGdldENhcmQoZW5kcG9pbnQgPSBcImNhcmRzXCIpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2VuZXJpY0ZldGNoKHsgZW5kcG9pbnQgfSk7XG4gIH1cblxuICBlZGl0VXNlcihib2R5LCBlbmRwb2ludCA9IFwidXNlcnMvbWVcIikge1xuICAgIHJldHVybiB0aGlzLl9nZW5lcmljRmV0Y2goeyBtZXRob2Q6IFwiUEFUQ0hcIiwgZW5kcG9pbnQsIGJvZHkgfSk7XG4gIH1cblxuICBlZGl0Q2FyZChtZXRob2QsIGVuZHBvaW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX2dlbmVyaWNGZXRjaCh7IG1ldGhvZCwgZW5kcG9pbnQgfSk7XG4gIH1cblxuICBhZGRDYXJkKGJvZHkpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2VuZXJpY0ZldGNoKHsgbWV0aG9kOiBcIlBPU1RcIiwgZW5kcG9pbnQ6IFwiY2FyZHNcIiwgYm9keSB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgdmFsaWRhdGVGb3JtQ29uZmlnT2JqZWN0LFxuICBzZWxlY3RvcnMsXG4gIEFQSWRhdGEsXG4gIGluaXRpYWxEYXRhLFxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XG5cbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aENvbmZpbXJhdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb24uanNcIjtcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xuaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQVBJLmpzXCI7XG5cbigoe1xuICBlZGl0UG9wdXBTZWxlY3RvcixcbiAgYWRkUG9wdXBTZWxlY3RvcixcbiAgY29uZmlybVBvcHVwU2VsZWN0b3IsXG4gIG5hbWVTZWxlY3RvcixcbiAgYWJvdXRTZWxlY3RvcixcbiAgcG9wdXBJbWFnZUNvbnRhaW5lcixcbiAgY2FyZHNDb250YWluZXIsXG4gIGJ1dHRvbkVkaXRTZWxlY3RvcixcbiAgYnV0dG9uQWRkU2VsZWN0b3IsXG4gIHBob3RvU2VsZWN0b3IsXG4gIGVkaXRBdmF0YXJQb3B1cFNlbGVjdG9yLFxuICBwcm9maWxlQXZhdGFyU2VsZWN0b3IsXG59KSA9PiB7XG4gIGNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XG5cbiAgY29uc3QgaW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZShwb3B1cEltYWdlQ29udGFpbmVyKTtcbiAgaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG4gIGNvbnN0IHRyaXBsZXRlbkFwaSA9IG5ldyBBcGkoQVBJZGF0YSk7XG5cbiAgY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oeyBuYW1lU2VsZWN0b3IsIGFib3V0U2VsZWN0b3IsIHBob3RvU2VsZWN0b3IgfSk7XG5cbiAgY29uc3QgaGFuZGxlSW1hZ2VDbGljayA9IChjYXJkRGF0YSkgPT4ge1xuICAgIGltYWdlUG9wdXAub3BlbihjYXJkRGF0YSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQXBpQ2FsbGJhY2sgPSAoeyBhY3Rpb24sIGVuZHBvaW50IH0pID0+IHtcbiAgICByZXR1cm4gdHJpcGxldGVuQXBpLmVkaXRDYXJkKGFjdGlvbiwgZW5kcG9pbnQpO1xuICB9O1xuXG4gIGNvbnN0IHBvcHVwQ29uZmlybSA9IG5ldyBQb3B1cFdpdGhDb25maW1yYXRpb24oY29uZmlybVBvcHVwU2VsZWN0b3IpO1xuICBwb3B1cENvbmZpcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICBjb25zdCBoYW5kbGVDYXJkRGVsZXRlID0gKCkgPT4ge1xuICAgIHJldHVybiBwb3B1cENvbmZpcm0ub3BlbigpO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZUNhcmQgPSAoY2FyZERhdGEpID0+IHtcbiAgICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAgICBjYXJkRGF0YSxcbiAgICAgIFwiI2NhcmRcIixcbiAgICAgIGhhbmRsZUltYWdlQ2xpY2ssXG4gICAgICBoYW5kbGVBcGlDYWxsYmFjayxcbiAgICAgIGhhbmRsZUNhcmREZWxldGVcbiAgICApO1xuICAgIHJldHVybiBjYXJkLmdlbmVyYXRlQ2FyZCgpO1xuICB9O1xuXG4gIGNvbnN0IGNhcmRMaXN0ID0gbmV3IFNlY3Rpb24oXG4gICAge1xuICAgICAgaXRlbXM6IFtdLFxuICAgICAgcmVuZGVyZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNhcmRMaXN0LmFkZEl0ZW0oY3JlYXRlQ2FyZChkYXRhKSk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgY2FyZHNDb250YWluZXJcbiAgKTtcblxuICBjb25zdCBpbml0aWFsaXplID0gKCkgPT4ge1xuICAgIHRyaXBsZXRlbkFwaVxuICAgICAgLmdldFVzZXIoKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICB1c2VySW5mby5zZXRVc2VySW5mbyhyZXN1bHQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcblxuICAgIHRyaXBsZXRlbkFwaVxuICAgICAgLmdldENhcmQoKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBjYXJkTGlzdC5zZXRJdGVtcyhyZXN1bHQucmV2ZXJzZSgpKTtcbiAgICAgICAgY2FyZExpc3QucmVuZGVySXRlbXMoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfSk7XG4gIH07XG5cbiAgLy9mb3IgYWRkaW5nIGJ1bGsgb2YgaW5pdGlhbCBjYXJkcyBvbiBsb2FkaW5nIHBhZ2VcbiAgLy9yYXcgY29kZSBmb3IgZnV0dXJlIGZlYXR1cmVcbiAgLy8gY29uc3QgYWRkQ2FyZHNCdWxrID0gKGNhcmRzRGF0YSkgPT4ge1xuICAvLyAgIGNhcmRzRGF0YS5mb3JFYWNoKChjYXJkKSA9PiB7XG4gIC8vICAgICB0cmlwbGV0ZW5BcGlcbiAgLy8gICAgICAgLmFkZENhcmQoY2FyZClcbiAgLy8gICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiBjYXJkTGlzdC5hZGRJdGVtKHJlc3BvbnNlKSlcbiAgLy8gICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICAvLyAgIH0pO1xuICAvLyB9O1xuXG4gIC8vIGFkZENhcmRzQnVsayhpbml0aWFsRGF0YSk7XG5cbiAgY29uc3QgaGFuZGxlUG9wdXBFZGl0ID0gKGlucHV0cykgPT4ge1xuICAgIGNvbnN0IGlucHV0RGF0YSA9IHtcbiAgICAgIG5hbWU6IGlucHV0c1tcImVkaXQtbmFtZVwiXSxcbiAgICAgIGFib3V0OiBpbnB1dHNbXCJlZGl0LWpvYlwiXSxcbiAgICB9O1xuICAgIHJldHVybiB0cmlwbGV0ZW5BcGlcbiAgICAgIC5lZGl0VXNlcihpbnB1dERhdGEpXG4gICAgICAudGhlbigoKSA9PiB1c2VySW5mby5zZXRVc2VySW5mbyhpbnB1dERhdGEpKVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVBvcHVwQWRkID0gKGlucHV0cykgPT4ge1xuICAgIGNvbnN0IGlucHV0RGF0YSA9IHtcbiAgICAgIG5hbWU6IGlucHV0c1tcImFkZC1uYW1lXCJdLFxuICAgICAgbGluazogaW5wdXRzW1wiYWRkLWxpbmtcIl0sXG4gICAgICBhdmF0YXI6IHVzZXJJbmZvLmdldFVzZXJJbmZvKCkuYXZhdGFyLFxuICAgIH07XG4gICAgcmV0dXJuIHRyaXBsZXRlbkFwaVxuICAgICAgLmFkZENhcmQoaW5wdXREYXRhKVxuICAgICAgLnRoZW4oKCkgPT4gY2FyZExpc3QuYWRkSXRlbShjcmVhdGVDYXJkKGlucHV0RGF0YSkpKVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVBvcHVwRWRpdEF2YXRhciA9IChpbnB1dHMpID0+IHtcbiAgICBjb25zdCB7IG5hbWUsIGFib3V0IH0gPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xuICAgIGNvbnN0IGlucHV0RGF0YSA9IHsgbmFtZSwgYWJvdXQsIGF2YXRhcjogaW5wdXRzW1wiZWRpdC1hdmF0YXJcIl0gfTtcbiAgICByZXR1cm4gdHJpcGxldGVuQXBpXG4gICAgICAuZWRpdFVzZXIoaW5wdXREYXRhKVxuICAgICAgLnRoZW4oKCkgPT4gdXNlckluZm8uc2V0VXNlckluZm8oaW5wdXREYXRhKSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAgfTtcblxuICBjb25zdCBwb3B1cEVkaXQgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XG4gICAgc2VsZWN0b3I6IGVkaXRQb3B1cFNlbGVjdG9yLFxuICAgIGNhbGxiYWNrOiBoYW5kbGVQb3B1cEVkaXQsXG4gIH0pO1xuICBwb3B1cEVkaXQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICBjb25zdCBwb3B1cEFkZCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgICBzZWxlY3RvcjogYWRkUG9wdXBTZWxlY3RvcixcbiAgICBjYWxsYmFjazogaGFuZGxlUG9wdXBBZGQsXG4gIH0pO1xuICBwb3B1cEFkZC5zZXRFdmVudExpc3RlbmVycygpO1xuXG4gIGNvbnN0IHBvcHVwRWRpdEF2YXRhciA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgICBzZWxlY3RvcjogZWRpdEF2YXRhclBvcHVwU2VsZWN0b3IsXG4gICAgY2FsbGJhY2s6IGhhbmRsZVBvcHVwRWRpdEF2YXRhcixcbiAgfSk7XG4gIHBvcHVwRWRpdEF2YXRhci5zZXRFdmVudExpc3RlbmVycygpO1xuXG4gIGNvbnN0IHJlZnJlc2hFZGl0SW5wdXRzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgbmFtZSwgYWJvdXQgfSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG4gICAgcG9wdXBFZGl0LnNldElucHV0c1ZhbHVlcyh7IFwiZWRpdC1uYW1lXCI6IG5hbWUsIFwiZWRpdC1qb2JcIjogYWJvdXQgfSk7XG4gIH07XG5cbiAgaW5pdGlhbGl6ZSgpO1xuXG4gICgoY29uZmlnKSA9PiB7XG4gICAgY29uc3QgdmFsaWRhdGVkRm9ybXMgPSBbXTtcbiAgICB2YWxpZGF0ZWRGb3Jtcy5wdXNoKHBvcHVwRWRpdC5nZXRGb3JtKCkpO1xuICAgIHZhbGlkYXRlZEZvcm1zLnB1c2gocG9wdXBBZGQuZ2V0Rm9ybSgpKTtcbiAgICB2YWxpZGF0ZWRGb3Jtcy5wdXNoKHBvcHVwRWRpdEF2YXRhci5nZXRGb3JtKCkpO1xuICAgIHZhbGlkYXRlZEZvcm1zLmZvckVhY2goKGZvcm0pID0+IHtcbiAgICAgIGZvcm1WYWxpZGF0b3JzW2Zvcm0ubmFtZV0gPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtLCBjb25maWcpO1xuICAgICAgZm9ybVZhbGlkYXRvcnNbZm9ybS5uYW1lXS5lbmFibGVWYWxpZGF0aW9uKCk7XG4gICAgfSk7XG4gIH0pKHZhbGlkYXRlRm9ybUNvbmZpZ09iamVjdCk7XG5cbiAgLy9lZGl0QXZhdGFyXG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3IocHJvZmlsZUF2YXRhclNlbGVjdG9yKVxuICAgIC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsICgpID0+IHtcbiAgICAgIHBvcHVwRWRpdEF2YXRhci5vcGVuKCk7XG4gICAgICBmb3JtVmFsaWRhdG9yc1twb3B1cEVkaXRBdmF0YXIuZ2V0Rm9ybSgpLm5hbWVdLnJlc2V0VmFsaWRhdGlvbigpO1xuICAgIH0pO1xuXG4gIC8vZWRpdEJ1dHRvblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJ1dHRvbkVkaXRTZWxlY3RvcikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICBwb3B1cEVkaXQub3BlbigpO1xuICAgIHJlZnJlc2hFZGl0SW5wdXRzKCk7XG4gICAgZm9ybVZhbGlkYXRvcnNbcG9wdXBFZGl0LmdldEZvcm0oKS5uYW1lXS5yZXNldFZhbGlkYXRpb24oKTtcbiAgfSk7XG5cbiAgLy9hZGRCdXR0b25cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihidXR0b25BZGRTZWxlY3RvcikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICBwb3B1cEFkZC5vcGVuKCk7XG4gICAgZm9ybVZhbGlkYXRvcnNbcG9wdXBBZGQuZ2V0Rm9ybSgpLm5hbWVdLnJlc2V0VmFsaWRhdGlvbigpO1xuICB9KTtcbn0pKHNlbGVjdG9ycyk7XG4iXSwibmFtZXMiOlsidmFsaWRhdGVGb3JtQ29uZmlnT2JqZWN0IiwiZm9ybVNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJBUElkYXRhIiwidXJsIiwidG9rZW4iLCJDYXJkIiwiY29uc3RydWN0b3IiLCJfcmVmIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImhhbmRsZUFwaUNhbGxiYWNrIiwiaGFuZGxlRGVsZXRlQnV0dG9uIiwibmFtZSIsImxpbmsiLCJfaWQiLCJ0aGlzIiwiX25hbWUiLCJfbGluayIsIl9jYXJkSWQiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUltYWdlQ2xpY2siLCJfaGFuZGxlQXBpQ2FsbGJhY2siLCJfaGFuZGxlRGVsZXRlQnV0dG9uIiwiX2hhbmRsZUxpa2VCdXR0b24iLCJldmVudCIsInRhcmdldCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiX2NhbGxiYWNrT3B0aW9ucyIsImFjdGlvbiIsImVuZHBvaW50IiwidGhlbiIsInRvZ2dsZSIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwiX2hhbmRsZURlbGV0aW9uIiwiY29uZmlybWF0aW9uIiwiX2NhcmRFbGVtZW50IiwicmVtb3ZlIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaW1hZ2UiLCJnZW5lcmF0ZUNhcmQiLCJkb2N1bWVudCIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJ0ZXh0Q29udGVudCIsInNyYyIsImFsdCIsIlNlY3Rpb24iLCJzZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiYWRkSXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwicmVuZGVySXRlbXMiLCJmb3JFYWNoIiwiaXRlbSIsInNldEl0ZW1zIiwiRm9ybVZhbGlkYXRvciIsImZvcm0iLCJzZXR0aW5ncyIsIl9zZXR0aW5ncyIsIl9mb3JtIiwiX3Nob3dFcnJvciIsImlucHV0IiwiZXJyb3JFbGVtZW50IiwiaWQiLCJhZGQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oaWRlRXJyb3IiLCJfZGlzYWJsZUJ1dHRvbiIsIl9zdWJtaXRCdXR0b24iLCJkaXNhYmxlZCIsIl9lbmFibGVCdXR0b24iLCJfaGFzSW52YWxpZElucHV0IiwiX2lucHV0c0xpc3QiLCJzb21lIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl90b2dnbGVCdXR0b24iLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiX3NldElucHV0c0xpc3RlbmVyIiwicmVzZXRWYWxpZGF0aW9uIiwiZW5hYmxlVmFsaWRhdGlvbiIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJQb3B1cCIsIl9tb2RhbCIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJrZXkiLCJfaGFuZGxlTW91c2VDbG9zZSIsInNldEV2ZW50TGlzdGVuZXJzIiwiUG9wdXBXaXRoRm9ybSIsImNhbGxiYWNrIiwic3VwZXIiLCJfc3VibWl0SGFuZGxlciIsIl9pbnB1dExpc3QiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJfZm9ybVZhbHVlcyIsInZhbHVlIiwicHJldmVudERlZmF1bHQiLCJidXR0b25UZXh0IiwicmVzZXQiLCJmaW5hbGx5Iiwic2V0SW5wdXRzVmFsdWVzIiwiaW5wdXREYXRhIiwiZ2V0Rm9ybSIsIlBvcHVwV2l0aEltYWdlIiwiX2ltYWdlTmFtZSIsIlBvcHVwV2l0aENvbmZpbXJhdGlvbiIsIl9jb25maXJtQnV0dG9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIl9pc0NvbmZpcm1lZCIsIl9yZXNvbHZlIiwiX2hhbmRsZUNvbmZpcm0iLCJvbmNlIiwiVXNlckluZm8iLCJuYW1lU2VsZWN0b3IiLCJhYm91dFNlbGVjdG9yIiwicGhvdG9TZWxlY3RvciIsIl9hYm91dCIsIl9hdmF0YXJQaG90byIsImdldFVzZXJJbmZvIiwiYWJvdXQiLCJzZXRVc2VySW5mbyIsIl9yZWYyIiwiYXZhdGFyIiwib25sb2FkIiwiQXBpIiwiX2FwaXVybCIsIl9vcHRpb25zIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJfZ2VuZXJpY0ZldGNoIiwibWV0aG9kIiwiYm9keSIsImZldGNoT3B0aW9ucyIsIkpTT04iLCJzdHJpbmdpZnkiLCJmZXRjaCIsInJlc3VsdCIsIm9rIiwianNvbiIsInJlamVjdCIsInN0YXR1cyIsImdldFVzZXIiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJnZXRDYXJkIiwiZWRpdFVzZXIiLCJlZGl0Q2FyZCIsImFkZENhcmQiLCJlZGl0UG9wdXBTZWxlY3RvciIsImFkZFBvcHVwU2VsZWN0b3IiLCJjb25maXJtUG9wdXBTZWxlY3RvciIsInBvcHVwSW1hZ2VDb250YWluZXIiLCJjYXJkc0NvbnRhaW5lciIsImJ1dHRvbkVkaXRTZWxlY3RvciIsImJ1dHRvbkFkZFNlbGVjdG9yIiwiZWRpdEF2YXRhclBvcHVwU2VsZWN0b3IiLCJwcm9maWxlQXZhdGFyU2VsZWN0b3IiLCJmb3JtVmFsaWRhdG9ycyIsImltYWdlUG9wdXAiLCJ0cmlwbGV0ZW5BcGkiLCJ1c2VySW5mbyIsImNhcmREYXRhIiwicG9wdXBDb25maXJtIiwiaGFuZGxlQ2FyZERlbGV0ZSIsImNyZWF0ZUNhcmQiLCJjYXJkTGlzdCIsImRhdGEiLCJwb3B1cEVkaXQiLCJpbnB1dHMiLCJwb3B1cEFkZCIsInBvcHVwRWRpdEF2YXRhciIsInJldmVyc2UiLCJjb25maWciLCJ2YWxpZGF0ZWRGb3JtcyIsInB1c2giLCJyZWZyZXNoRWRpdElucHV0cyJdLCJzb3VyY2VSb290IjoiIn0=